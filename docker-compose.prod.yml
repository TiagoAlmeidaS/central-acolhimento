# Central de Acolhimento - Production Environment
# Docker Compose para ambiente de produção

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: central-acolhimento-postgres-prod
    environment:
      POSTGRES_DB: central_acolhimento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api-repo/alembic/versions:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - central-acolhimento-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: central-acolhimento-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - central-acolhimento-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: central-acolhimento-ollama-prod
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
      OLLAMA_MODELS: /root/.ollama/models
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - central-acolhimento-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"]
      interval: 60s
      timeout: 30s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # LLM Service
  llm-service:
    build:
      context: ./llm-repo
      dockerfile: Dockerfile
    container_name: central-acolhimento-llm-prod
    environment:
      OLLAMA_HOST: http://ollama:11434
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      REDIS_URL: redis://redis:6379
    ports:
      - "8001:8000"
    networks:
      - central-acolhimento-network
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # API Service
  api-service:
    build:
      context: ./api-repo
      dockerfile: Dockerfile
    container_name: central-acolhimento-api-prod
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-secure_password_123}@postgres:5432/central_acolhimento
      LLM_SERVICE_URL: http://llm-service:8000
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY:-super-secret-key-change-in-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://central-acolhimento.com,https://www.central-acolhimento.com}
    ports:
      - "8000:8000"
    networks:
      - central-acolhimento-network
    depends_on:
      postgres:
        condition: service_healthy
      llm-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: central-acolhimento-nginx-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - central-acolhimento-network
    depends_on:
      - api-service
      - llm-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: central-acolhimento-prometheus-prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - central-acolhimento-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: central-acolhimento-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - central-acolhimento-network
    depends_on:
      - prometheus
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  central-acolhimento-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
